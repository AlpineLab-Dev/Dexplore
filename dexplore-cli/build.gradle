import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath depends.shadow_gradle
        classpath (depends.proguard) {
            exclude group: 'com.android.tools.build'
        }
    }
}

plugins {
    id 'java'
}
apply plugin: 'com.github.johnrengelman.shadow'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

dependencies {
    implementation depends.jadx_core
    implementation depends.jadx_plugin
    implementation depends.jcommander
    implementation project(':dexplore-lib')
}

task unitTest(type: Test) {
    dependsOn test
}

jar { // noinspection GroovyAssignabilityCheck
    manifest {
        attributes 'Main-Class': "${projectGroup}.dexplore.CommandLine"
        attributes 'Implementation-Title': projectName
        attributes 'Implementation-Version': projectVersion
        attributes 'Build-Time': new Date().format("dd-MM-yyyy hh:mm:ss aa")
    }
    archiveBaseName.set(projectName)
    from fileTree(dir: 'src/main', includes: ['assets/**'])
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    from(rootProject.projectDir) {
        include 'LICENSE'
        into('META-INF')
    }
    exclude 'META-INF/*.MF', 'META-INF/*.txt', 'META-INF/NOTICE*', 'NOTICE*', '*.proto'
    destinationDirectory = file(jarOutputPath)
}

shadowJar {
    from(rootProject.projectDir) {
        include 'LICENSE'
        into('META-INF')
    }
    exclude 'META-INF/*.MF', 'META-INF/*.txt', 'META-INF/NOTICE*', 'NOTICE*', '*.proto'
}

task proguard(type: ProGuardTask, dependsOn: shadowJar) {
    injars shadowJar.getArchiveFile(),
           filter: "!android/**.txt,!android/**.xml,!export/**.tmpl," +
                   "!google/protobuf/**,!com/google/gson/**"
    outjars jar.archiveFile.get().asFile

    def home = System.getProperty("java.home")
    if (!JavaVersion.current().isJava9Compatible()) {
        libraryjars home + '/lib/rt.jar'
    } else {
        libraryjars home + '/jmods', jarfilter: '!**.jar', filter: '!module-info.class'
    }

    dontoptimize
    dontwarn 'jadx.**'
    dontwarn 'org.slf4j.**'
    dontwarn 'org.jf.util.jcommander.**'
    keepattributes '*Annotation*'
    keep 'class jadx.plugins.** { *; }'
    keep 'class com.beust.jcommander.** { *; }'
    keep 'class io.github.neonorbit.dexplore.** { *; }'
    keepclassmembers 'enum * {                                       \
                          public static **[] values();                \
                          public static ** valueOf(java.lang.String);  \
                      }'
}

build.dependsOn(proguard)
