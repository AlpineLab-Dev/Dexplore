apply from: "gradle/functions.gradle"

allprojects {
    group = 'io.github.neonorbit'
    version = '1.4.0' //-SNAPSHOT
}

task produceJar() {
    dependsOn ':dexplore-cli:build'
}

task localRelease() {
    dependsOn ':dexplore-lib:publish'
}

task mavenRelease() {
    dependsOn ':dexplore-lib:clean'
    dependsOn ':dexplore-lib:publish'
}

ext {
    primaryKey      = 'NeonOrbit'
    projectName     = project.name
    projectGroup    = project.group
    projectVersion  = project.version
    projectRootPath = projectDir.absolutePath
    mavenArtifact   = projectName.toLowerCase()
    jarOutputPath   = projectRootPath + '/out'
    mavenLocalRepo  = projectRootPath + '/out/maven'
    isLocalRelease  = hasGradleTask('localRelease')
    isMavenRelease  = hasGradleTask('mavenRelease')
    depends = [
        dexlib2       : 'org.smali:dexlib2:2.5.2',
        jcommander    : 'com.beust:jcommander:1.82',
        jadx_core     : 'io.github.skylot:jadx-core:1.4.3',
        jadx_plugin   : 'io.github.skylot:jadx-dex-input:1.4.3',
        findbugs      : 'com.google.code.findbugs:jsr305:3.0.2',
        guava         : 'com.google.guava:guava:27.1-android',
        proguard      : 'com.guardsquare:proguard-gradle:7.2.1',
        junit_api     : 'org.junit.jupiter:junit-jupiter-api:5.8.2',
        junit_params  : 'org.junit.jupiter:junit-jupiter-params:5.8.2',
        junit_engine  : 'org.junit.jupiter:junit-jupiter-engine:5.8.2',
        shadow_plugin : 'gradle.plugin.com.github.johnrengelman:shadow:7.1.2',
        kotlin_plugin : 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.10'
    ]
}

allprojects {
    apply plugin: 'java'
    checkJDKCompatibility()
    java.sourceCompatibility = JavaVersion.VERSION_1_8
    java.targetCompatibility = JavaVersion.VERSION_1_8
    if (JavaVersion.current()> JavaVersion.VERSION_1_8) {
        compileJava.options.compilerArgs.addAll(['--release', '8'])
    }
}

subprojects {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        testRuntimeOnly depends.junit_engine
        testImplementation depends.junit_api
        testImplementation depends.junit_params
    }
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }
}

def hasGradleTask(name) {
    return gradle.startParameter.taskNames.contains(name)
}

static def checkJDKCompatibility() {
    if (!JavaVersion.current().isJava8Compatible()) {
        throw new GradleException('Incompatible JDK version')
    }
}
